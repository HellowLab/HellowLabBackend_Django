services:
  # Django Service
  django:
    container_name: django_hellowlab
    build: .
    # command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8001:8000"
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - DEBUG=false
      - DJANGO_DB_NAME=hellowlab_db
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_DB_USER=${DJANGO_DB_USER}
      - DJANGO_DB_PASSWORD=${DJANGO_DB_PASSWORD}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - JWT_SIGNING_KEY=${JWT_SIGNING_KEY}
    networks:
      - my_network
    restart: unless-stopped

  # PostgreSQL Service
  db:
    container_name: hellowlab_db
    image: postgres:latest
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=hellowlab_db
      - POSTGRES_USER=${DJANGO_DB_USER}
      - POSTGRES_PASSWORD=${DJANGO_DB_PASSWORD}
    networks:
      - my_network
    restart: unless-stopped


  # NOT USED IN DEVELOPMENT SERVER SINCE ANOTHER NGINX IS ALREADY RUNNING
  ### NGINX Proxy Manager Service
  # nginx-proxy-manager:
  #   image: 'jc21/nginx-proxy-manager:latest'
  #   container_name: nginx_proxy_manager
  #   ports:
  #     - "80:80"    # HTTP
  #     - "443:443"  # HTTPS
  #     - "81:81"    # NGINX Proxy Manager UI
  #   environment:
  #     - DB_SQLITE_FILE=/data/database.sqlite
  #   volumes:
  #     - ./nginx_proxy_data:/data
  #     - ./nginx_proxy_letsencrypt:/etc/letsencrypt
  #   networks:
  #     - my_network
  #   restart: unless-stopped

  # # Portainer Service
  # portainer:
  #   image: portainer/portainer-ce
  #   container_name: portainer
  #   command: -H unix:///var/run/docker.sock
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - portainer_data:/data
  #   ports:
  #     - "9000:9000" # Portainer UI
  #   networks:
  #     - frontend
  #   restart: unless-stopped

  # # Prometheus Service
  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - backend
  #   restart: unless-stopped

  # # Grafana Service
  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - "3000:3000" # Grafana UI
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin # Set Grafana admin password
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - backend
  #   restart: unless-stopped

volumes:
  postgres_data_dev:
  # portainer_data:
  # grafana_data:

networks:
  my_network:
    external: true
  
