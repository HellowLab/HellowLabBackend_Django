name: Deploy to VPS

on:
  push:
    branches:
      - main
      - integration

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS
        run: |
          BRANCH="${{ github.ref_name }}"
          echo "Deploying branch: $BRANCH"
          
          if [ "$BRANCH" == "main" ]; then
            ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=7 root@146.190.185.97 << 'EOF'
          cd HellowLabBackend_Django
          echo "Creating .env file at HellowLabBackend_Django/.env"

          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" > .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env
          echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
          echo "DJANGO_DB_USER=${{ secrets.DJANGO_DB_USER }}" >> .env
          echo "DJANGO_DB_PASSWORD=${{ secrets.DJANGO_DB_PASSWORD }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "JWT_SIGNING_KEY=${{ secrets.JWT_SIGNING_KEY }}" >> .env

          git checkout main
          git pull origin main
          echo "Deploying to production environment"
          docker compose up -d --build --remove-orphans
          EOF
          elif [ "$BRANCH" == "integration" ]; then
            ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=7 admin@136.49.185.195 << 'EOF'
          cd HellowLabBackend_Django
          echo "Using existing .env file (this does not check that the file exists, please ensure it does before running this script)"

          git checkout integration

          git pull origin integration
          echo "Deploying to integration/test environment using .dev.yml file"
          docker compose -f docker-compose.dev.yml up -d --build --remove-orphans
          EOF
          fi
          
